#+OPTIONS: num:nil toc:nil timestamp:nil
#+REVEAL_THEME: black
#+REVEAL_TRANS: none
#+REVEAL_EXTRA_CSS: ./presentations.css
#+REVEAL_ROOT: .

# Local variables:
# after-save-hook: org-re-reveal-export-to-html-and-browse
# end:
#+Title: Minimal concurrent OS
#+Author: Daníel Grétarsson and Ólafur Bogason

* 
#+begin_export html
<iframe width="600px" height="200px" src="https://www.youtube.com/embed/O2R4R_EebBk" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
#+end_export

** Who are we?
   Engineers at Genki Instruments, creators of *Wave*, an expressive embedded device for music and beyond.

   In engineering-speak that means developing everything from  *hardware* and *firmware* to *algorithms* and *software* for end-users.
   
   We mainly use *C++*, but curious about other systems-level languages. We strive for *clean*, *readable* code.
  
* Goal
  Build boilerplate for a minimal (event driven) *concurrent* OS.

  It should run on bare-metal and have a *single thread of execution*.
  
  Inspired by our own attempts at building reliable firmware for Wave.
  
* Constraints
  - Processing power and memory limited.
  - /Soft/ real time (cooperative scheduler) -- tasks operate on deadlines that don't cause fatalities if not met.
  - No Dynamic Memory -- we can't ever /run out/.
  - No Exceptions -- exceptions are nondeterministic, hard to handle.
  - Catch bugs at *compile* time as opposed to *run* time.
  - Development times, maintainability etc.
    
* Why C++17/20?
** Type safety
** Language features
   - ~RAII~ -- Deterministic way to manage resources.
   - ~Templates~ -- Generic compile-time programming.
   - ~lambdas~ -- Dependency injected, compile-time glue.
   - ~namespaces~ -- Group together similar code
   - ~std::variant / visit~ -- Type-safe /dynamic/ dispatch.
     
     ...and many more!
     
** Active developer community
   - [[https://github.com/boost-experimental/sml][boost::sml (State Machine Library)]] -- Domain Specific Language for writing FSMs.
   - [[https://en.cppreference.com/w/][stl (Standard Template Library)]] -- Useful algorithms, types and containers.
   - [[https://www.etlcpp.com/][etl (Embedded Template Library)]] -- Fixed-size containers.
   - [[https://github.com/Microsoft/GSL][gsl (Guidelines Support Library)]] -- ~gsl::byte~ and ~gsl::span~ /view/ into raw memory.

* Core concepts
* Interrupts/Events
  - *Interrupts* are the lowest level of abstraction. Arise directly from hardware, halting execution.
  - *Events* are the /meaningful/ encoding of *interrupts*, e.g., read sensor, react to pin change.
  #+begin_src C++ :tangle example.cpp
namespace events {
struct data { std::array<std::byte, MaxPacketSize> packet; };
struct button { uint8_t id; bool toggle_state; };
  
using var_t = std::variant<const data, const button>;
using queue = etl::queue<var_t, MaxEventQueueSize>;
}

events::queue event_queue{};

static void pin_handler(const uint8_t pin_id) { event_queue.push(events::button{pin_id, gpio_pin_read(pin_id)}); }

static void data_receive_handler(const uint8_t* const bytes, const size_t size) {
    events::data event{};
    std::copy(bytes, bytes + size, event.packet.begin());
    event_queue.push(event);
}
  #+end_src
* Message passing (dispatching)
  - *Message passing* is a form of communication accomplished by queuing *events*.

    ~std::variant~ offers *many* ways to achieve dynamic dispatch, e.g.,  ~std::holds_alternative~ + ~std::get~ (exceptional), ~std::get_if~, ~std::visit~...
** 
#+begin_export html
<iframe width="800px" height="200px" src="https://godbolt.org/#g:!((g:!((g:!((h:codeEditor,i:(j:1,lang:c%2B%2B,source:'%23include+%3Cvariant%3E%0A%0Avoid+handle_int()%3B%0Avoid+handle_float()%3B%0A%0Aint+main(int+argc,+char**+argv)%0A%7B%0A++++std::variant%3Cint,+float%3E+v%3B%0A%0A++++if+(argc+%3D%3D++2)+%7B%0A++++++++v+%3D+42%3B%0A++++%7D+else++%7B%0A++++++++v+%3D+42.0f%3B%0A++++%7D%0A%0A++++if+(auto*+p+%3D+std::get_if%3Cint%3E(%26v))+%7B%0A++++++++handle_int()%3B%0A++++%7D+else+if+(auto*+p+%3D+std::get_if%3Cfloat%3E(%26v))+%7B%0A++++++++handle_float()%3B%0A++++%7D%0A%0A++++return+0%3B%0A%7D%0A'),l:'5',n:'0',o:'C%2B%2B+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:armg820,filters:(b:'0',binary:'1',commentOnly:'0',demangle:'1',directives:'0',execute:'1',intel:'0',libraryCode:'1',trim:'1'),lang:c%2B%2B,libs:!(),options:'-std%3Dc%2B%2B17+-O3+-fno-exceptions',source:1),l:'5',n:'0',o:'ARM+gcc+8.2+(Editor+%231,+Compiler+%231)+C%2B%2B',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4"></iframe>
#+end_export
  
 #+begin_src :export none C++ -std=c++17 -O3 -fno-exceptions
#include <variant>

// creates helper type for the variant visitor
template<class... Ts> struct visitor : Ts... { using Ts::operator()...; };
template<class... Ts> visitor(Ts...) -> visitor<Ts...>;

// struct visitor {
//     void operator()(const int& v) {};
//     void operator()(const float& v) {};
// };

void handle_int();
void handle_float();

int main(int argc, char** argv)
{
    std::variant<int, float> v;

    if (argc ==  2) {
        v = 42;
    } else  {
        v = 42.0f;
    }

    std::visit(visitor{
        [&](const int&) { handle_int(); },
        [&](const float&) { handle_float(); },
        }, v);

    return 0;
}
 #+end_src
  
** 
   #+begin_export html
   <iframe width="800px" height="200px" src="https://godbolt.org/#g:!((g:!((g:!((h:codeEditor,i:(j:1,lang:c%2B%2B,source:'%23include+%3Cvariant%3E%0A%0A//+creates+helper+type+for+the+variant+visitor%0Atemplate%3Cclass...+Ts%3E+struct+visitor+:+Ts...+%7B+using+Ts::operator()...%3B+%7D%3B%0Atemplate%3Cclass...+Ts%3E+visitor(Ts...)+-%3E+visitor%3CTs...%3E%3B%0A%0A//+struct+visitor+%7B%0A//+++++void+operator()(const+int%26+v)+%7B%7D%3B%0A//+++++void+operator()(const+float%26+v)+%7B%7D%3B%0A//+%7D%3B%0A%0Avoid+handle_int()%3B%0Avoid+handle_float()%3B%0A%0Aint+main(int+argc,+char**+argv)%0A%7B%0A++++std::variant%3Cint,+float%3E+v%3B%0A%0A++++if+(argc+%3D%3D++2)+%7B%0A++++++++v+%3D+42%3B%0A++++%7D+else++%7B%0A++++++++v+%3D+42.0f%3B%0A++++%7D%0A%0A++++std::visit(visitor%7B%0A++++++++%5B%26%5D(const+int%26)+%7B+handle_int()%3B+%7D,%0A++++++++%5B%26%5D(const+float%26)+%7B+handle_float()%3B+%7D,%0A++++++++%7D,+v)%3B%0A%0A++++return+0%3B%0A%7D%0A'),l:'5',n:'0',o:'C%2B%2B+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:armg820,filters:(b:'0',binary:'1',commentOnly:'0',demangle:'0',directives:'0',execute:'1',intel:'0',libraryCode:'1',trim:'1'),lang:c%2B%2B,libs:!(),options:'-std%3Dc%2B%2B17+-O3+-fno-exceptions',source:1),l:'5',n:'0',o:'ARM+gcc+8.2+(Editor+%231,+Compiler+%231)+C%2B%2B',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4"></iframe>
   #+end_export
   
** Considerations
   - ~std::get_if~ :: Smaller binary, performant.
   - ~std::visit~ :: Larger binary, extra ~cmp~, nice syntax, exhaustive.

* Tasks / Scheduler
  - A *task* is an abstraction that represents some processing unit.
  - A *scheduler* runs *tasks* from the *main context* (!)
**  
   #+begin_export html
   <iframe width="800px" height="200px" src="https://godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAKxAEZSAbAQwDtRkBSAJgCFufSAZ1QBXYskwgA5NwDMeFsgYisAag6yAwgREAHBpg3YOABgCCpswUwBbfU2sbtAT12YWTG5gB0v1WeJgQVJVAld3T0xVADERRRDBAnQQEEE8AC9MAH0CX29VAEl0AA8jSwA3VDx0VQAzEizMJmQELLw7Bgg0FkTVROSQHX1DLQCgvLKuADZQkNjFbinFuoSklIUsYqzBTABHEXcJJyLiidlsAEp1AHY%2Bc1UH1QhaiH6U4EwCY5KjCAILi4hPIXDR3CzXAAilks1g6DhGLjcHi8qgAKnoDCEwkjIjEyuZuolMMVdMRVJVqnUGk0WhB0cNFsshpi8dNlrUQbdLI9VITrCSyW9UhlsgRVAA5dSyCF9NaDDHZNKZJxC4i2VDlbJq2qYNWKUVOekGMrnFLlJjKEZgnn1YiNZqtdr6V5y20AdyYxHQhoVv2ZmEBsoG7s93q00V%2BHNI3J5sYeQpsTAA1tkNsTtnsDvqnOKylzISDZGCOJDoeYKTUEKx0AY2iwCBBC2CK6oqywa9lagxUA5G6DLAAjVCoBihJiCJNZLhZYhxFgKYB9otlswKMWJhSNm7Wx6VZgEPAGVRDkd9FqYdAiAx22csedsKUygizq0xh57hyHqIn0cEceT2gZznBdH1CF9%2B3MN9VAAemgtFkyiBRVFEaxiAAWkENA3FUcdVG1XVDkMe5Hj5HCRCIMcJyyWhQI4ABWPg2TomUSx3ONSKYcjUFUFhMAvQQsjdEgk1ohjGWY7c8M%2BMQWEogCgLvBdQRuKFl2I9jUB6MVOIo0lUAkQQBKE4gRI0FixOY1jW2rWsux7BsmxUiCLHU2M1R0YhZITBCsl0Jg8GICBeP4wThJCPSDKM4SmygktVOLVyOK4uSp1EvgJNYqCeSSijgvQKKTLS%2BiWNuKSPNkv8qOnW970XRy4ucuMHhy7iIswQzQsKsz1AsqFSrbDs6wc5SGrUlyzCasqZKDFJExTXz/MCvKCqTcLiH09qVpi1zRoSiaSM03odO4yrJwYPBem67z5v9P5/2orF7q4bbxp5N0EC/J5MIQC8r11BTaquTLXJtakHTuqjzsSEJ6PSiEukO7SuKZf8ga5EGmpa2Hls61bVDajrjKTYrQNOpc9smt6PqPIK%2BPy3HGzRtjKZ5AmVvJrKmoajGHjil6eW517Hnc6aTGcwWpEBBhpDoqRSBYaQTDl1BpE0fh%2BD6URxCiORaDlghFclwEkxAOiTEYaQABY5YVqQldIFWpDlwQQHNg27cl0g4FgJA0DsL8yAoBH/evEBPRsYAAA4uHN2pD1Ql2IAHQ3SAHBRPWcaQ9dIP2vHrAB5FgGEzj3SCwRM2AMFP8DVZAD01F3S%2BJTBkHIyQpGztdMGl0vzoHYgM80DB2%2Bz592izz3mDYFB1d4Rg8AHF3IEBVBdAPQ7pAwpIzM4Xh%2BFoa5VDQ/PZCP2oWFQNDiQkNe8EO52tYkOgpZlm2U8dswACUAFlVGAZBkCqEjt4LgTxcCEBIOoLgsh6CqCHiHXUUCYFXDVnvXg%2BtDYAlID9JgWBiCUGNqbc2Pdrby3ftIZ2rtSDuyVlgnuXA36l0dhgj2WDNTEDSJpEAlsgA%3D%3D%3D"></iframe>
   #+end_export
  
 #+begin_src :export none C++ -std=c++17 -O3 -fno-exceptions
#include <tuple>

template<typename... Args, typename Func, std::size_t... Idx>
void for_each_impl(const std::tuple<Args...>& t, Func&& f, std::index_sequence<Idx...>) {
    (f(std::get<Idx>(t)), ...);
}

template<typename Tuple, typename F>
constexpr void for_each(Tuple&& tuple, F&& f){
    constexpr std::size_t N = std::tuple_size<std::remove_reference_t<Tuple>>::value;
    for_each_impl(std::forward<Tuple>(tuple), std::forward<F>(f),
            std::make_index_sequence<N>{});
}

void handle_int();
void handle_float();

int main(int argc, char** argv) {
    volatile bool scheduler_running = true;
    volatile bool task_1_running = true;
    volatile bool task_2_running = true;

    const auto task_1 = [&] {
        const auto needs_work = [&] { return task_1_running; };
        const auto process_work = [&]{ handle_float(); };

        return std::make_pair(needs_work, process_work);
    };

    const auto task_2 = [&] {
        const auto needs_work = [&] { return task_2_running; };
        const auto process_work = [&]{ handle_int(); };

        return std::make_pair(needs_work, process_work);
    };

    const auto task_list = std::make_tuple(task_1, task_2);

    while (scheduler_running) {
        for_each(task_list, [](const auto& task) {
            const auto[needs_work, process_work] = task();

            while (needs_work()) {
                process_work();
            }
        });
    }

    return 0;
}
 #+end_src
  
* Finite state machine
  - *Finite state machines* describe and handle *business logic* or hardware functionality, e.g., button or battery monitoring.
   
** Two-button shutdown
   :PROPERTIES:
   :reveal_background: #D3D3D3
   :END:
    #+begin_src plantuml :height 5cm :file img/button_shutdown.svg
     scale 0.9
     skinparam classFontColor white
     
     [*] --> none_pressed

     none_pressed --> x_pressed : [is_x_pressed]
     none_pressed --> y_pressed : [is_y_pressed]

     y_pressed --> none_pressed : [is_y_released]
     y_pressed --> both_buttons_pressed : [is_x_pressed] / indicate_shutdown

     x_pressed --> none_pressed : [is_x_released]
     x_pressed --> both_buttons_pressed : [is_y_pressed] / indicate_shutdown

     both_buttons_pressed --> terminating_y_pressed : [is_x_released]
     both_buttons_pressed --> terminating_x_pressed : [is_y_released]

     terminating_y_pressed --> [*] : [is_y_released] / shutdown
     terminating_x_pressed --> [*] : [is_x_released] / shutdown
    #+end_src

    #+RESULTS:
    [[file:button_shutdown.svg]]
   
**  
   #+begin_export html
   <iframe width="800px" height="200px" src="https://godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAKxAEZSAbAQwDtRkBSAJgCFufSAZ1QBXYskwgA5NwDMeFsgYisAag6yAwggIEADoJAB6I8SYB3AHTBCCEQCMRgzONQsCmd5bQBbI/dRUQQIAWkwADz0XPB9PAiYGI0EfRJ8mYJcjBSUVTH9A4KSUywQ9PQ1sDgAGAEE5bOU1DU1kYPx3Cuq62oA3VDx0VRE8AH0FfGQmDxHBOwJ0VHMWCABKDT5e/sHBAE8Mnxm5haXV9a6uliZYwT0mCVVMHrjBdQB2DZrVVWDiEWQCVSOXRuN48IYKAgADhGAIG60BgQYqiIwGADEwM3iHnhHFeABEzrVcQSibUfn8AQRzKgRkCiCxDiJ5osWKCul8vsEpnhkKo0CwMpFiOD3NCATwmfSABrqWR41RVQmfDlcgg8vluQV6YXDUUw1QS4EsACasvltCV7I5TCZqFUqCiZiIxFWqw1AoBuI%2BHJ9Q0ECmAqku11u9wCQQIIBAyQYSt9HKcAaDV0wNzumAeT3cgkttXjX35wVUNqIqjwghG4RG2tTzkGGnlHAArHwm3iIIWASXUNwAGwPFag1TETAEMSszCWAZmhsGyVuGV9vsPSwotEY1WYHH4uP5zvF21lis7asjwR1s3qFvN9v77vLzCDr3D0fjlfThuzw3001Lrj9yc13RTEpi3WQwWJXNlXjO9D3LSsRhHdF0kwes5SvVtb01LtbQfJ93hfMdiAnKc0IJdDvzcX9/2XMAwEA1BUWAzdt3I7092wg9S3gk8kMwFCyIwm8O04%2B9/wHIcRyIkiPzlL95xNdQaPEuiGKYjcsTAiCd3A848w4j0uLtWYmWOVlZ2bTCh12fZGWZE41nAt42L06DfVg7iWAmUC7LMy9LJvIdhjGLyeR8kz7OWRztJc0k3J9KS3zSABrDECDMAVCDwNwYSYex0QgK183jAAqbguBYNwMRrc9UPKmYlLBR44maOk3E6Ft4KrGq60CiyuC4bqz16gaZlIIrit9crKpYarhrq0aXn4TMWq0NqWA6ngeNPWs6rbfyBpPHqFq4MbXMm/NyqG3b0HqpbeBWjo1oUzausQzBkN6/b%2Boqqqdtq27FvG/SLp9cqjvmwHTvupqswIVqXtkSpOuPd7Pr2xt0Omv7jqhs64tBqaBuugG7sax74eeo1XtR3HAqMMtQsmaYIr8n6AgIBB/pG6Hgfi0Hwe5k6GuW5qns0daaYQun9oZ8YwpZo4WQOrgOa5umgfOwmOXKtWhbxmGKYR6mkcst6%2BIEvqsYGjxiB8BRuTYEYIZuu6%2Be1nWBr1jXofJsXKYlxHka21GLa%2BzHGxtlx7cuNUnZJnn8e6fmLvK22Y8d4BpchsnRbh436Slqsw4x1QGdZ5XZyld2PaUrh04duOs5d0nFr9/OqcL02UedtH%2BPDsvviVpZLylCafWiibIKJHSPi6CFVDSBQIAXphiGAZBSD5BA15Kkri3Xno1neCbw2CKMYwvnxmipGl1t8lkKm%2Ba/dJB74sR5EZ0mcYgCAgf0ABemBUAADN/4%2BCfHJdCtBaCTwJiqHwlhtSoAkOeEY/sID%2B0MCASW7wqhb3SiILc%2BI4FuWSEg4gKDazoLhpguG2DcE8HoMiX4xC8SkJ9OQ5BqCKwYKwVGRh%2BDVAgISM4YkHCEEUKoWgvh9CBEvXeMwkRDAxEkMtDuWoUgViMGkE2KQpAWDSCqPo1A0hND8GWsIMQ9w5C0H0ZGKQxiVjaOSiAJs%2BCGDSAACz6MMY4kx0h9GGHwQ4pxpA4CwCQL4PQeB0RkAoCJHwMS4kgDXj4YAkIuD4JAbE22hgID2CMfo%2BwDtiA7GkHY0gvhYjuAAPIsAYOU/xpAsBpDYOiIpLS8Ajn%2BHgJ4hhmkREwMgJkkgpCVIhB9TpDA8D2DMGUzQGAxmVPSjECpWjGCsHYBY3gjBZmGEgNoh0apNTSBCG0BsnBeD8FoK8VQIRamyHuSAyqYRwgSD0CcgUQTRDiEkLAnRUg9EGM6aYqQNQABKABZVQG9eSQksFwVQEBcCEBIEpWQzDFlJNiS4DFsDVDmOubwexRTnGkAQPxLAxBKAuLcR47xvjQWBKECAEJZLtGeKkFwJlzSwWkv8eSp4xB/RuBAF4oAA"></iframe>
   #+end_export

  #+begin_src C++ :export none
#include <https://raw.githubusercontent.com/boost-experimental/sml/master/include/boost/sml.hpp>
#include <cstdint>

void ui_indicate_shutdown();
void system_shutdown();

namespace events {
  struct button { uint8_t id; bool toggle_state; };
}

struct two_button_shutdown {
    static constexpr uint8_t ButtonX = 0;
    static constexpr uint8_t ButtonY = 1;

    auto operator()() const {
        using namespace boost::sml;
        using namespace events;

        const auto is_x_pressed = [](const auto& e) { return e.id == ButtonX && e.toggle_state; };
        const auto is_y_pressed = [](const auto& e) { return e.id == ButtonY && e.toggle_state; };

        const auto is_x_released = [](const auto& e) { return e.id == ButtonY && !e.toggle_state; };
        const auto is_y_released = [](const auto& e) { return e.id == ButtonY && !e.toggle_state; };

        const auto shutdown = [] { system_shutdown(); };

        const auto indicate_shutdown = [] { ui_indicate_shutdown(); };

        return make_transition_table(
               ,*"none_pressed"_s + event<button>[is_x_pressed] = "x_pressed"_s,
                "none_pressed"_s + event<button>[is_y_pressed] = "y_pressed"_s,

                "x_pressed"_s + event<button>[is_x_released] = "none_pressed"_s,
                "y_pressed"_s + event<button>[is_y_released] = "none_pressed"_s,

                "x_pressed"_s + event<button>[is_y_pressed] / indicate_shutdown = "both_pressed"_s,
                "y_pressed"_s + event<button>[is_x_pressed] / indicate_shutdown = "both_pressed"_s,

                "both_pressed"_s + event<button>[is_x_released] = "terminating_y_pressed"_s,
                "both_pressed"_s + event<button>[is_y_released] = "terminating_x_pressed"_s,

                "terminating_x_pressed"_s + event<button>[is_x_released] / shutdown = X,
                "terminating_y_pressed"_s + event<button>[is_y_released] / shutdown = X
        );
    }
};

int main(int argc, char** argv){
    boost::sml::sm<two_button_shutdown> sm;
    static_assert(sizeof(sm) == 11);

    sm.process_event(events::button{0, true});
    sm.process_event(events::button{1, true});
    sm.process_event(events::button{0, false});
    sm.process_event(events::button{1, false});
}
  #+end_src
** Logging for free
   #+begin_src C++
namespace sml = boost::sml;

struct MyLogger {
    template<class SM, class TEvent>
    void log_process_event(const TEvent&) {
        LOG("[%s][process_event] %s\n", sml::aux::get_type_name<SM>(), sml::aux::get_type_name<TEvent>());
    }

    template<class SM, class TGuard, class TEvent>
    void log_guard(const TGuard&, const TEvent&, bool result) {
        LOG("[%s][guard] %s %s %s\n", sml::aux::get_type_name<SM>(), sml::aux::get_type_name<TGuard>(),
                sml::aux::get_type_name<TEvent>(), (result ? "[OK]" : "[Reject]"));
    }

    template<class SM, class TAction, class TEvent>
    void log_action(const TAction&, const TEvent&) {
        LOG("[%s][action] %s %s\n", sml::aux::get_type_name<SM>(), sml::aux::get_type_name<TAction>(),
                sml::aux::get_type_name<TEvent>());
    }

    template<class SM, class TSrcState, class TDstState>
    void log_state_change(const TSrcState& src, const TDstState& dst) {
        LOG("[%s][transition] %s -> %s\n", sml::aux::get_type_name<SM>(), src.c_str(), dst.c_str());
    }
};

Logger logger{};
sml::sm<two_button_shutdown, sml::logger<MyLogger>> sm{logger};
   #+end_src
* Questions?
 #+ATTR_HTML: :width 60% :height 60%
 [[file:img/wave_keyboard.jpg]]
* Resources
  - [[https://en.cppreference.com/w/][C++ reference]]
  - [[https://bitbashing.io/embedded-cpp.html][C++ on Embedded Systems]]
  - [[https://www.youtube.com/playlist?list=PLs3KjaCtOwSZ2tbuV1hx8Xz-rFZTan2J1][C++ Weekly]]
  - [[https://www.youtube.com/watch?v=c9Xt6Me3mJ4][Michael Caisse]] on C++ in embedded systems
